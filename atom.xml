<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://likingzi.github.io</id>
    <title>Liking&apos;s DataOps Blog</title>
    <updated>2023-02-16T10:59:03.238Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://likingzi.github.io"/>
    <link rel="self" href="https://likingzi.github.io/atom.xml"/>
    <subtitle>愿你出走半生，归来仍是少年</subtitle>
    <logo>https://likingzi.github.io/images/avatar.png</logo>
    <icon>https://likingzi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Liking&apos;s DataOps Blog</rights>
    <entry>
        <title type="html"><![CDATA[PostgreSQL主备库搭建]]></title>
        <id>https://likingzi.github.io/post/postgresql-zhu-bei-ku-da-jian/</id>
        <link href="https://likingzi.github.io/post/postgresql-zhu-bei-ku-da-jian/">
        </link>
        <updated>2023-02-16T10:40:28.000Z</updated>
        <content type="html"><![CDATA[<p>pg主备库的搭建，首先需在2个节点安装pg软件，然后依次在2个节点配置主备。<br>
本文采用os为CentOS7.6，pg版本使用14.2，以下为详细部署步骤。<br>
本文两个节点的ip地址如下：</p>
<pre><code>[root@node1:0 ~]# cat /etc/hosts
#CentOS Linux release 7.6.1810 (Core)
192.168.222.11 node1
192.168.222.12 node2
</code></pre>
<h1 id="安装-配置-启动">■■■ 安装、配置、启动</h1>
<h2 id="官网下载安装不推荐采用此方式安装">■■ 官网下载安装【不推荐采用此方式安装】</h2>
<h3 id="install-the-repository-rpm">■ Install the repository RPM</h3>
<p>yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</p>
<h3 id="install-postgresql">■ Install PostgreSQL</h3>
<p>yum install -y postgresql14-server</p>
<h3 id="optionally-initialize-the-database-and-enable-automatic-start">■ Optionally initialize the database and enable automatic start</h3>
<p>/usr/pgsql-14/bin/postgresql-14-setup initdb<br>
systemctl start postgresql-14</p>
<h3 id="stop-and-uninstall">■ Stop and uninstall</h3>
<p>systemctl stop postgresql-14<br>
yum remove -y postgresql*<br>
yum remove -y pgdg*</p>
<h2 id="编译安装推荐采用此方式安装">■■ 编译安装【推荐采用此方式安装】</h2>
<p>可参考pg中文社区<br>
cd /u01/pg<br>
wget https://ftp.postgresql.org/pub/source/v14.2/postgresql-14.2.tar.bz2 --no-check-certificate<br>
tar xvfj postgresql*.bz2<br>
cd postgresql-14.2<br>
./configure --prefix=/u01/pg/pgsql<br>
此时如果缺少readline，则yum install -y readline-devel<br>
mkdir -p /u01/pg/pgsql<br>
make install-world</p>
<h2 id="配置">■■ 配置</h2>
<p>adduser postgres<br>
passwd postgres<br>
mkdir /u01/pg/pgsql/data<br>
chown -R postgres:postgres /u01/pg<br>
su - postgres</p>
<h3 id="修改默认数据路径">■ 修改默认数据路径</h3>
<p>export PGDATA=/u01/pg/pgsql/data<br>
export PATH=/u01/pg/pgsql/bin:$PATH</p>
<h3 id="初始化数据库">■ 初始化数据库</h3>
<p>initdb</p>
<h3 id="修改其他默认配置">■ 修改其他默认配置</h3>
<p>查看配置文件：<br>
grep -Pv &quot;<sup>#|</sup>$|^\t&quot; $PGDATA/postgresql.conf</p>
<p>vim $PGDATA/postgresql.conf</p>
<pre><code># 默认监听在127.0.0.1
#listen_addresses = 'localhost'         # what IP address(es) to listen on;
# 配置监听在任意ip
listen_addresses = '*'
# 打开log收集
logging_collector = on
注：日志文件默认在log目录下
</code></pre>
<p>vim $PGDATA/pg_hba.conf</p>
<pre><code># IPv4 local connections:
# 默认配置，只允许本机访问
host    all             all             127.0.0.1/32            trust
# 允许所有ip访问
host    all             all             0.0.0.0/0               trust
# 允许指定网段访问
host    all             all             192.168.222.0/24        trust
</code></pre>
<h3 id="启停数据库">■ 启停数据库</h3>
<p>pg_ctl status<br>
pg_ctl start<br>
pg_ctl stop</p>
<h3 id="客户端工具使用开源的pgadmin">■ 客户端工具使用开源的pgAdmin</h3>
<p>Set Master Password: postgres</p>
<h1 id="主从配置">■■■ 主从配置</h1>
<h2 id="主节点">■■ 主节点</h2>
<h3 id="创建用于主从访问的用户-修改postgres用户的密码用于远程登录">■ 创建用于主从访问的用户， 修改postgres用户的密码，用于远程登录</h3>
<p>su - postgres</p>
<pre><code>psql
# 创建 postgres 密码
ALTER USER postgres WITH PASSWORD 'postgres';
# 创建 从库 replica 用户密码
CREATE ROLE replica login replication encrypted password 'replica';
# 检查账号
SELECT usename from pg_user;
SELECT rolname from pg_roles;
</code></pre>
<h3 id="修改-pg_hbaconf-配置">■ 修改 pg_hba.conf 配置</h3>
<p>vim $PGDATA/pg_hba.conf</p>
<pre><code># 添加从库网段
host    all             all             0.0.0.0/0               trust
# replication privilege.
local   replication     all                                     peer
host    replication     replica         192.168.222.12/24       md5
注意此处 192.168.222.12/24 需修改为从库的 IP 段
</code></pre>
<p>■ 修改 postgresql.conf 配置<br>
vim $PGDATA/postgresql.conf</p>
<pre><code>listen_addresses = '*'
wal_level = hot_standby
synchronous_commit = remote_write
# synchronous_commit 参考文档可选其他 on
max_wal_senders = 32     #同步最大的进程数量
wal_sender_timeout = 60s #流复制主机发送数据的超时时间
max_connections = 100    #最大连接数，从库的max_connections必须要大于主库的
</code></pre>
<h2 id="从节点">■■ 从节点</h2>
<h3 id="从主库同步数据">■ 从主库同步数据</h3>
<p>pg_basebackup -D $PGDATA -h node1 -p 5432 -U replica -X stream -P<br>
注：从库无需初始化</p>
<h3 id="修改-postgresqlconf-配置">■ 修改 postgresql.conf 配置</h3>
<p>从 PostgreSQL 12 开始已移除了 recovery.conf 文件，相关配置合并到了 postgresql.conf 中，由于从主库同步数据库，其中配置也需要移除和修改<br>
vim $PGDATA/postgresql.conf</p>
<pre><code># 移除或注释 wal_level
wal_level = xxx
# 修改或添加以下
primary_conninfo = 'host=192.168.222.11 port=5432 user=replica password=replica'
recovery_target_timeline = 'latest'
</code></pre>
<h3 id="创建-standbysignal">■ 创建 standby.signal</h3>
<p>创建 standby.signal 文件，声明从库。<br>
vim $PGDATA/standby.signal</p>
<pre><code># 声明从库
standby_mode = on
</code></pre>
<h3 id="确认数据目录权限避免踩坑">■ 确认数据目录权限，避免踩坑</h3>
<p>chown -R postgres.postgres $PGDATA</p>
<h3 id="启动">■ 启动</h3>
<p>pg_ctl start</p>
<h2 id="确认同步">■■ 确认同步</h2>
<h3 id="主库查看">■ 主库查看</h3>
<pre><code>ps aux |grep sender
# 返回 postgres: walsender replica 192.168.222.12(64218) streaming 3/27000148

select application_name, state, sync_priority, sync_state from pg_stat_replication;
 application_name |   state   | sync_priority | sync_state 
------------------+-----------+---------------+------------
 walreceiver      | streaming |             0 | async

select pid,state,client_addr,sync_priority,sync_state from pg_stat_replication;
  pid  |   state   |  client_addr   | sync_priority | sync_state 
-------+-----------+----------------+---------------+------------
 33328 | streaming | 192.168.222.12 |             0 | async
</code></pre>
<h3 id="从库查看">■ 从库查看</h3>
<pre><code>ps aux |grep receiver
# 返回 postgres: walreceiver streaming 3/27000148
</code></pre>
<h1 id="监控">■■■ 监控</h1>
<h2 id="sampler">■■ Sampler</h2>
<p>Sampler 是一个用于 shell 命令执行、可视化和警报的工具，配置了一个简单的 YAML 文件。</p>
<p>wget https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-linux-amd64 -O sampler<br>
chmod +x sampler</p>
<h3 id="在yaml文件中定义shell命令">■ 在yaml文件中定义shell命令</h3>
<pre><code>cat &gt; config.yml &lt;&lt;-'EOF'
variables:
    PGPASSWORD: postgres
    postgres_connection: psql -h localhost -U postgres --no-align --tuples-only
runcharts:
  - title: Data write(Byte)
    position: [[0, 8], [20, 12]]
    rate-ms: 500
    legend:
        enabled: true
        details: false
    scale: 2
    items:
      - label: background writer
        color: 178
        sample: psql -At -U postgres -c &quot;select 8 * (buffers_checkpoint + buffers_clean
            + buffers_backend)/1024 as total_writen from pg_stat_bgwriter;&quot;
      - label: checkpoint write
        color: 162
        sample: psql -At -U postgres -c &quot;select buffers_checkpoint * 8 / (checkpoints_timed
            + checkpoints_req) as checkpoint_write_avg from pg_stat_bgwriter&quot;
  - title: PostgreSQL connections
    position: [[40, 8], [40, 12]]
    rate-ms: 500
    legend:
        enabled: true
        details: false
    scale: 2
    items:
      - label: active connections
        color: 178
        sample: psql -At -U postgres -c &quot;select count(*) from pg_stat_activity where
            state = 'active' and pid &lt;&gt; pg_backend_pid();&quot;
      - label: idle connections
        color: 162
        sample: psql -At -U postgres -c &quot;select count(*) from pg_stat_activity where
            state = 'idle' and pid &lt;&gt; pg_backend_pid();&quot;
      - label: idle in transaction connections
        color: 32
        sample: psql -At -U postgres -c &quot;select count(*) from pg_stat_activity where
            state = 'idle in transaction' and pid &lt;&gt; pg_backend_pid();&quot;
barcharts:
  - title: PostgreSQL Database Status
    position: [[0, 0], [40, 8]]
    rate-ms: 500
    scale: 0
    items:
      - label: tuple insert
        init: $postgres_connection
        sample: select tup_inserted from pg_stat_database where datname = current_database();
      - label: tuple delete
        init: $postgres_connection
        sample: select tup_deleted from pg_stat_database where datname = current_database();
      - label: tuple update
        init: $postgres_connection
        sample: select tup_updated from pg_stat_database where datname = current_database();
      - label: tuple fetch
        init: $postgres_connection
        sample: select tup_fetched from pg_stat_database where datname = current_database();
gauges:
  - title: PostgreSQL Database Age
    position: [[0, 32], [40, 8]]
    rate-ms: 500
    scale: 2
    color: 122
    percent-only: false
    cur:
        sample: psql -At -U postgres -c &quot;select age(datfrozenxid) from pg_database
            where datname = current_database();&quot;
    max:
        sample: psql -At -U postgres -c &quot;select 210000&quot;
    min:
        sample: psql -At -U postgres -c &quot;select 100&quot;
sparklines:
  - title: CPU usage
    position: [[0, 20], [40, 12]]
    rate-ms: 200
    scale: 0
    sample: ps -A -o %cpu | awk '{s+=$1} END {print s}'
  - title: PostgreSQL cache hit ratio
    position: [[40, 20], [40, 12]]
    init: $postgres_connection
    sample: select round(sum(blks_hit)*100/sum(blks_hit+blks_read),2)::numeric from
        pg_stat_database where datname = current_database();
  - title: PostgreSQL transaction commit ratio
    position: [[40, 0], [40, 8]]
    init: $postgres_connection
    sample: select round(100*(xact_commit::numeric/(case when xact_commit &gt; 0 then
        xact_commit else 1 end + xact_rollback)),2)::numeric as commit_ratio from
        pg_stat_database where datname = current_database();
textboxes:
  - title: Server status
    position: [[20, 8], [20, 12]]
    rate-ms: 500
    sample: top -bn 1 | head -n 5
asciiboxes:
  - title: PostgreSQL Version
    position: [[40, 32], [40, 8]]
    rate-ms: 500
    color: 43
    sample: psql -At -U postgres -c &quot;select version()&quot;
    border: false
    font: 2d
EOF
</code></pre>
<h3 id="运行">■ 运行</h3>
<p>/u01/pg/monitor/sampler -c /u01/pg/monitor/config.yml<br>
<img src="https://likingzi.github.io/post-images/pgmonitor.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[漏洞扫描与安全加固之Apache Axis组件]]></title>
        <id>https://likingzi.github.io/post/ApacheAxis/</id>
        <link href="https://likingzi.github.io/post/ApacheAxis/">
        </link>
        <updated>2023-02-09T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-apache-axis组件高危漏洞自查及整改">一、Apache Axis组件高危漏洞自查及整改</h1>
<p>Apache Axis组件存在由配置不当导致的远程代码执行风险。</p>
<h2 id="1-影响版本">1. 影响版本</h2>
<p>Axis1 和Axis2各版本均受影响</p>
<h2 id="2-处置建议">2. 处置建议</h2>
<p>1）禁用此服务的远程访问:修改 AXIS 目录下 WEB-INF 文件夹中的 server-config.wsdd 文件，查找参数&quot;enableRemoteAdmin&quot;，将其设置为 false。<br>
2）若无后台管理需求，可以直接关闭services/AdminService页面。</p>
<h2 id="3-临时处置建议">3. 临时处置建议</h2>
<p>通过ACL禁止对/services/AdminService路径的除本机以外的访问。通过其他主机访问https://目标IP/web应用路径/services/AdminService,无法访问则证明处置成功</p>
<p>【本文档由同事zhengch分享，在此表达敬意！】</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://likingzi.github.io/post/hello-gridea/</id>
        <link href="https://likingzi.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>